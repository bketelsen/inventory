# https://taskfile.dev

version: "3"

env:
  GO111MODULE: on
  GOPROXY: https://proxy.golang.org,direct
  STATIC_DIR: "web/static"

interval: 1s

tasks:
  tools:
    platforms:
      [
        linux,
        darwin/arm64,
      ]
    cmds:
      - platforms: [linux/amd64]
        cmd: test -f bins/tailwindcli || wget -O bins/tailwindcli https://github.com/dobicinaitis/tailwind-cli-extra/releases/download/v2.1.12/tailwindcss-extra-linux-x64

      - platforms: [darwin/arm64]
        cmd: test -f bins/tailwindcli || wget -O bisn/tailwindcli https://github.com/dobicinaitis/tailwind-cli-extra/releases/download/v2.1.12/tailwindcss-extra-macos-arm64

      - chmod +x bins/tailwindcli
      - go install github.com/air-verse/air@v1.61.7
  dev:
    desc: Setup git hooks
    cmds:
      - cp -f scripts/pre-commit.sh .git/hooks/pre-commit
      - go install github.com/caarlos0/svu@latest
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.0.2
      - go install github.com/a-h/templ/cmd/templ@latest
      - go install mvdan.cc/gofumpt@latest
      - npm i docsify-cli -g

  setup:
    desc: Install dependencies
    cmds:
      - go mod tidy


  docker:setup:
    desc: Setup Docker for multi-arch image builds
    cmds:
      - docker run --privileged --rm tonistiigi/binfmt --install all

  build:styles:
    desc: Build the styles
    sources:
      - "./web/**/*.html"
      - "./web/**/*.ts"
      - "./web/**/*.templ"
      - "./web/**/*.go"
    generates:
      - $STATIC_DIR/index.css
    cmds:
      - bins/tailwindcli -c tailwind.config.js -i web/styles/styles.css -o $STATIC_DIR/index.css

  build:templ:
    cmds:
      - templ generate
    sources:
      - "**/*.templ"
    generates:
      - "**/*_templ.go"

  build:
    desc: Build the binary
    sources:
      - ./**/*.go
      - ./**/*.templ
    generates:
      - ./inventory
    cmds:
      - go build ./cmd/inventory
    deps:
      - build:styles
      - build:templ

  live:styles:
    desc: Build the styles
    watch: true
    sources:
      - "./web/**/*.html"
      - "./web/**/*.ts"
      - "./web/**/*.templ"
      - "./web/**/*.go"
    generates:
      - $STATIC_DIR/index.css
    cmds:
      - bins/tailwindcli -c tailwind.config.js -i web/styles/styles.css -o $STATIC_DIR/index.css

  live:templ:
    cmds:
      - templ generate --watch --proxy="http://localhost:8080" --open-browser=false

  live:server:
    cmds:
      - |
        air \
         -build.cmd "go build -o tmp/main -tags dev ./cmd/inventory" \
         -build.bin "tmp/main" \
         -build.args_bin "server" \
         -build.delay "100" \
         -build.exclude_dir "webold,bins,dist,docs,manpages,scripts,data,node_modules,web/libs/datastar/node_modules,web/libs/lit-html/node_modules" \
         -build.include_ext "go" \
         -build.stop_on_error "false" \
         -build.send_interrupt "true" \
         -build.kill_delay "200" \
         -misc.clean_on_exit "true"

  live:reload:
    cmds:
      - |
        air \
        -build.cmd "templ generate --notify-proxy" \
        -build.bin "true" \
        -build.delay "300" \
        -build.exclude_dir "" \
        -build.include_dir "$STATIC_DIR" \
        -build.include_ext "js,css" \
        -build.send_interrupt "true" \
        -build.kill_delay "200"

  live:
    deps:
      - live:templ
      - live:styles
      - live:server
      - live:reload

  install:
    desc: Install the binary locally
    deps:
      - build
    sources:
      - ./**/*.go
      - ./**/*.tpl
    cmds:
      - go install ./cmd/inventory

  test:
    desc: Run tests
    env:
      LC_ALL: C
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      SOURCE_FILES: '{{default "./..." .SOURCE_FILES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -failfast -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt {{.SOURCE_FILES}} -run {{.TEST_PATTERN}} -timeout=15m

  cover:
    desc: Open the cover tool
    cmds:
      - go tool cover -html=coverage.txt

  fmt:
    desc: gofumpt all code
    cmds:
      - gofumpt -w -l .

  lint:
    desc: Lint the code with golangci-lint
    cmds:
      - golangci-lint run --config ./.golangci.yaml ./...

  ci:
    desc: Run all CI steps
    cmds:
      - task: setup
      - task: build
      - task: test

  default:
    desc: Runs the default tasks
    cmds:
      - task: ci

  commit:
    desc: Commit changes
    deps:
      - build
      - fmt
      - lint
    preconditions:
      - sh: '[ -x "$(command -v gum)" ]'
        msg: gum is not installed, see https://github.com/charmbracelet/gum
    cmds:
      - ./scripts/commit.sh

  release-check:
    desc: Run goreleaser check
    cmds:
      - goreleaser check
    silent: true

  release:
    desc: Create a new tag
    vars:
      NEXT:
        sh: svu n
    prompt: "This will release {{.NEXT}}. Continue?"
    preconditions:
      - sh: '[ $(git symbolic-ref --short HEAD) = "main" ]'
        msg: Not on main branch
      - sh: "[ $(git status --porcelain=2 | wc -l) = 0 ]"
        msg: "Git is dirty"
    cmds:
      - git tag {{.NEXT}}
      - echo {{.NEXT}}
      - git push origin --tags
      - GOPROXY=proxy.golang.org go list -m github.com/bketelsen/inventory@{{.NEXT}}

  goreleaser:
    desc: Run GoReleaser either in snapshot or release mode
    deps:
      - build
    vars:
      SNAPSHOT:
        sh: 'if [[ $GITHUB_REF != refs/tags/v* ]]; then echo "--snapshot"; fi'
    cmds:
      - goreleaser release --clean --timeout 60m {{.SNAPSHOT}}
